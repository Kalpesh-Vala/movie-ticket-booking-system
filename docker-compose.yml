version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: movie-postgres
    environment:
      POSTGRES_DB: cinema_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7.0
    container_name: movie-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: movie_booking
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: movie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: movie-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API Gateway and Database
  kong-database:
    image: postgres:15-alpine
    container_name: kong-postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong123
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  kong-migrations:
    image: kong:3.4
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong123
    networks:
      - movie-network

  kong:
    image: kong:3.4
    container_name: movie-kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong123
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
    ports:
      - "8000:8000"    # Proxy port
      - "8443:8443"    # Proxy SSL port
      - "8001:8001"    # Admin API port
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: movie-user-service
    environment:
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/movie_booking?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 8001
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - movie-network
    restart: unless-stopped

  cinema-service:
    build:
      context: ./services/cinema-service
      dockerfile: Dockerfile
    container_name: movie-cinema-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cinema_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      GRPC_SERVER_PORT: 9090
      SERVER_PORT: 8002
    ports:
      - "8002:8002"  # REST API
      - "9090:9090"  # gRPC server
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie-network
    restart: unless-stopped

  booking-service:
    build:
      context: ./services/booking-service
      dockerfile: Dockerfile
    container_name: movie-booking-service
    environment:
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/movie_booking?authSource=admin
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      CINEMA_SERVICE_GRPC_URL: cinema-service:9090
      USER_SERVICE_REST_URL: http://user-service:8001
      PAYMENT_SERVICE_REST_URL: http://payment-service:8003
      PORT: 8000
    ports:
      - "8010:8000"  # Different external port to avoid conflict
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      cinema-service:
        condition: service_started
      user-service:
        condition: service_started
    networks:
      - movie-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: movie-payment-service
    environment:
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/movie_booking?authSource=admin
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      PORT: 8003
    ports:
      - "8003:8003"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - movie-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: movie-notification-service
    environment:
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/movie_booking?authSource=admin
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - movie-network
    restart: unless-stopped

  # Development and Monitoring Tools
  mongo-express:
    image: mongo-express:1.0.0
    container_name: movie-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - movie-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: movie-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@movietickets.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: movie-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - movie-network

# Networks
networks:
  movie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  kong_data:
    driver: local